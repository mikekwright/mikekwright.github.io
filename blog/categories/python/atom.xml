<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | My Fortress of Solitude]]></title>
  <link href="http://www.mikewright.me/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.mikewright.me/"/>
  <updated>2015-10-21T14:32:51-06:00</updated>
  <id>http://www.mikewright.me/</id>
  <author>
    <name><![CDATA[Michael Wright]]></name>
    <email><![CDATA[mkwright@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sort2013 Part III: Machine Learning in Python]]></title>
    <link href="http://www.mikewright.me/blog/2013/10/19/sort2013-machine-learning-in-python/"/>
    <updated>2013-10-19T22:43:00-06:00</updated>
    <id>http://www.mikewright.me/blog/2013/10/19/sort2013-machine-learning-in-python</id>
    <content type="html"><![CDATA[<p>I haven&rsquo;t done much with Machine Learning since graduating from school years ago.  However
recently there have been a number of projects where the use of machine learning can bring
a significant benefit.  This lecture was a great refresher and introduction to how
task can be accomplished using python.</p>

<p>Why should we focus on machine learning now?</p>

<p>The power of a machine learning algorithm is its ability to <strong>GENERALIZE</strong> from a finite set of examples.</p>

<!-- more -->


<ul>
<li>Database mining &ndash; Large Dataset from growth and automation, web click data, etc</li>
<li>Can get a better feel for total number of people with the flu on the <a href="http://www.google.org/flutrends/us/#US">web faster than hospitals</a></li>
<li>Hard by hand app development &ndash; Handwriting Recognition, Computer Vision, Language Processing</li>
<li>Self-customizing programs &ndash; Netflix, Amazon product recommendations, Google ads, etc</li>
<li>Prediction &ndash; Continuous outcomes, Catgorical outcomes like email spam</li>
</ul>


<h2>Clustering</h2>

<p><em>Clustering is grouping all items that have a similiar relationship than items that appear
in other clusters</em></p>

<p>There are a few types of clustering and how
<a href="http://scikit-learn.org/stable/auto_examples/cluster/plot_cluster_comparison.html">the compare</a>.
Below is alist of this different cluster types.</p>

<ul>
<li>MiniBatchKMeans</li>
<li>AffinityPropagation</li>
<li>MeanShift</li>
<li>Spectral</li>
<li>Ward</li>
<li>DBSCAN</li>
<li>K-Means</li>
</ul>


<p>In the lecture he specifically covered K-Means clustering.</p>

<h3>K-Means clustering</h3>

<p>Allows you to take a feature vector and figure out how the information should group
together (correlate)</p>

<p>Given a training data set and a number of clusters find the position of the centroids.
However the weakness you have with K is that you need to specify a number to begin
with for it to use with grouping.</p>

<p>It is often used with Image Color Compression (Converting a 16-bit image to a 6-bit image). Which
is accomplished by Replace each pixel color in the original with the color of its nearest k-means centroid.</p>

<p>Advantages</p>

<ul>
<li>Simple to implement</li>
<li>Usually very fast</li>
<li>Works well for many applications</li>
</ul>


<p>Disadvantages</p>

<ul>
<li>Have to know number of clusters in advances</li>
<li>Linear Partitioning</li>
<li>Outcome <strong>can</strong> be dependent on initial centroid position (so run multiple times with different centers)</li>
<li>Isn&rsquo;t perfect at grouping data that isn&rsquo;t seperated by equal distance (Like multiple Curves being associated instead of blobs)</li>
</ul>


<h2>Regression Prediction (Intuition)</h2>

<h3>Intuition</h3>

<ul>
<li>Supervised learning</li>
<li>Generating a graph based on points and finding the line (2D Linear Regression)</li>
<li>This is done by finding the minimal error in the generated line given the total number of points.</li>
</ul>


<h3>Gradient Descent</h3>

<ul>
<li>Define a cost function that reflects the total error as a function of the regression parameters</li>
<li>Find the parameters that then minimize the cost function
&ndash;> Start with Random parameter values
&ndash;> Adjust parameters by some step (directly in proportion to the cost function results)
&ndash;> Repeat until parameters no longer change</li>
</ul>


<h2>Classifiers</h2>

<ul>
<li>Supervised learning &ndash; training set includes &ldquo;truth&rdquo;</li>
<li>Categorical outcomes (Gaussian Mixture Model &ndash; GMM and other probabilitstic classifiers)</li>
<li>Examples
&ndash;> Logistic Regression
&ndash;> Support Vector Machine
&ndash;> Decision Tree</li>
</ul>


<h3>Metrics</h3>

<p>Precision: <em>percentage of the objects classified as A, really are A</em><br/>
Recall: <em>Of all the A objects the percentage that we actually classified as A</em></p>

<h3>Decision Tree</h3>

<ul>
<li>Object to be classified has an associated set of properties</li>
<li>classifier can be constructued as set of rules</li>
</ul>


<p>Fruit &amp; Vegetable Example</p>

<ul>
<li>Properties
&ndash;> size
&ndash;> shape
&ndash;> color</li>
<li>Rules
&ndash;> if size is small ^ shape is round ^ (color is green v color is red)
&ndash;> etc</li>
</ul>


<p>Can be constructed working with a tree that sets what is there where every leaf from a root becomes a new rule</p>

<p>Classifiers can be set using <em>entropy</em> &ndash; A coin toss has an entropy of 1 bit. The highest information gain will have the least entropy (unpredictability).</p>

<p>Overfitting is a disadvantage because it doesn&rsquo;t create the clear seperation necessary, this can be solved using &ldquo;Random Forests&rdquo; or multiple decision tress.</p>

<h2>Python</h2>

<p>The main question that one might ask is why to look into python as the language for
machine learning. Well it turns out that Python has basically become the defacto
standard for scientific tools and languages.</p>

<p>Books</p>

<ul>
<li>Python for Data Analysis</li>
</ul>


<p>Libraries</p>

<ul>
<li>Numpy</li>
<li>Scipy</li>
<li><a href="http://scikit-learn.org/stable/">Scikit-learn</a></li>
</ul>


<h2>Resources</h2>

<p>Kaggle.com is a machine learning competition problem.</p>

<p>Coursera classes</p>

<ul>
<li>Machine Learnining &ndash; Standford</li>
<li>Intro to Data Science &ndash; University of Washington</li>
<li>Discrete Optimizations</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static Site Meandering]]></title>
    <link href="http://www.mikewright.me/blog/2013/10/15/static-site-meandering/"/>
    <updated>2013-10-15T20:06:00-06:00</updated>
    <id>http://www.mikewright.me/blog/2013/10/15/static-site-meandering</id>
    <content type="html"><![CDATA[<p>So, I don&rsquo;t know if I want to say that I am &ldquo;late&rdquo; to the game, but I can honestly say that I am glad I have finally moved to a static site generator for my blog posts.  Originally when I decided to use static github pages to host my blog, I had decided to be a little bit ambitious and create an entire system using angular and my &ldquo;limited&rdquo; frontend skills.  However after a few posts and the issues that it raised I decided to move to an existing static site generator.</p>

<h1>AND I WAS BLOWN AWAY BY THE CHOICES</h1>

<!-- more -->


<p>Much like any other items on the web there are a number of different static site generators that exist.  I wasn&rsquo;t able to go through and use all of them yet, but I decided I wanted to place the ones that I saw and my very quick experience with these generators.  These generators can be broken up by the language that is used in the generator.</p>

<h2>NodeJS</h2>

<ul>
<li><a href="http://docpad.org">Docpad</a> &ndash; This seemed to be the tool of choice for many nodejs devs, very powerful and rich <em>Most likely next candidate</em></li>
<li><a href="http://wintersmith.io/">Wintersmith</a> &ndash; &ldquo;Flexible, minimalistic, multi-platform static site generator&rdquo; &ndash; Site Description</li>
<li><a href="http://harpjs.com/">Harp</a> &ndash; Another static frontend generator with an available <a href="https://harp.io">platform</a></li>
<li><a href="https://github.com/flatiron/blacksmith">Blacksmith</a> &ndash; &ldquo;A generic static site generator built using flatiron, plates, and marked.&rdquo; &ndash; Site Description</li>
<li><a href="https://github.com/techwraith/scotch">Scotch</a> &ndash; &ldquo;A really classy, dead simple, markdown based, blogging framework for node.js&rdquo; &ndash; Site Description</li>
<li><a href="https://github.com/creationix/wheat">Wheat</a> &ndash; A blogging framework that has a number of stars, but not recently updated (Over a year ago)</li>
</ul>


<h3><a href="http://yeoman.io">Yeoman Generators</a></h3>

<ul>
<li><a href="https://github.com/Snugug/generator-armadillo">Armadillo</a> &ndash; Generator for easily creating static sites for use with Github pages</li>
<li><a href="https://github.com/colynb/generator-go-static">Go Statis</a> &ndash; Generator for site scaffolding and Grunt task execution</li>
</ul>


<h2>Ruby</h2>

<ul>
<li><a href="http://jekyllrb.com">Jekyll</a> &ndash; The core blog tool that is used by a number of sites, including github pages.</li>
<li><a href="http://octopress.org">Octopress</a> &ndash; Built on top of Jekyll</li>
<li><a href="http://nanoc.ws/">Nanoc</a></li>
<li><a href="http://middlemanapp.com/">MiddleMan</a></li>
</ul>


<h2>Python</h2>

<ul>
<li><a href="http://getpelican.com">Pelican</a> &ndash; Light and simple static site generation in python <em>Most likely the candidate after Docpad</em></li>
<li><a href="http://getnikola.com">Nikola</a> &ndash; Uses doit for fast builds and has plugin capabilities</li>
<li><a href="http://mynt.mirroredwhite.com/">Mynt</a> &ndash; Attempt at giving advanced CMS support to static blogs</li>
<li><a href="http://www.blogofile.com/">Blogofile</a> &ndash; A generator for those obsessed with blogging</li>
<li><a href="http://pythonhosted.org/Frozen-Flask/">Frozen-Flask</a> &ndash; Taking a flask application and turning it into static content</li>
</ul>


<p>At this point I am happy with the choice to use Octopress, but I&rsquo;m also finiky and will &ldquo;most likely&rdquo; migrate the blog to another technology in the future.  This is mostly because, if I am not learning something new, than what I am doing here ;&ndash;).</p>

<h1>Resources</h1>

<p>There were a few useful sites that I came across while checking these tools out, especially one that pointed to the numerous available python frameworks.  Those are listed below.</p>

<ul>
<li><a href="http://eristoddle.github.io/python/2012/05/16/python-static-web-site-generators/">http://eristoddle.github.io/python/2012/05/16/python-static-web-site-generators/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Django with no root access]]></title>
    <link href="http://www.mikewright.me/blog/2012/05/09/installing-django-with-no-root-access/"/>
    <updated>2012-05-09T00:00:00-06:00</updated>
    <id>http://www.mikewright.me/blog/2012/05/09/installing-django-with-no-root-access</id>
    <content type="html"><![CDATA[<p>I really have enjoyed working with a $5/month hosting company for seriously small projects
with few performance requirements.  The service that I am using at this time is
<a href="http://www.site5.com/">site5</a>.  They offer a great plan that works for me and the many
simple projects I have been using as prototypes.</p>

<p>For this specific discussion I am going to talk about what I needed to do get the lastest
django (v1.4) working on site5.</p>

<!-- more -->


<h2>Sandbox environment</h2>

<p>Lets setup our little sandbox area for placing the source to compile and the actually
compiled instance</p>

<pre><code>    cd ~
    mkdir installed
    cd installed
    mkdir compile
    cd compile
</code></pre>

<p>Next we will download python for use on the instance. (Django 1.4 doesn&rsquo;t work with python 3)</p>

<pre><code>    wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2
    tar -xvf Python-2.7.3.tar.bz2 
</code></pre>

<p><em>Note: This is specific for version 2.7.3 which was the stable release at the time this
article was written</em></p>

<p>So we have the source, now we need to compile and install Python 2.7 (non root user)</p>

<pre><code>    cd Python-2.7.3
    ./configure PREFIX=$HOME/installed/python2.7
    make install DESTDIR=$HOME/installed/python2.7
</code></pre>

<p>Add python to the PATH for simplicity, to do this we will add an entry to the
.bash_profile file located in our home directory</p>

<pre><code>    cd ~
    echo "export PATH=$HOME/installed/python2.7/bin:$PATH" &gt;&gt; ~/.bash_profile
</code></pre>

<p>Reload the .bash_profile so that python will be on the path.</p>

<pre><code>    source .bash_profile
</code></pre>

<p>Verify that the new python is found in the path</p>

<pre><code>    python --version
    (should print Python 2.7.3)
</code></pre>

<p>Install PIP (I followed instructions found <a href="http://www.pip-installer.org/en/latest/installing.html">here</a>)</p>

<pre><code>    cd ~/installed/compile
    curl http://python-distribute.org/distribute_setup.py | python
    curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python
</code></pre>

<p><em>Note if the last command fails with certificate issue, run with curl -k</em></p>

<p>Install django using pip</p>

<pre><code>    pip install django
    pip install flup
    pip install pysqlite  (only sometimes required and only if you are doing sqlite db)
</code></pre>

<p>Create directory for website and add necessary files to get apache to pick it up or in this
case <strong>.htaccess</strong></p>

<pre><code>    AddHandler fcgid-script .fcgi
    Options +FollowSymLinks

    RewriteEngine On
    RewriteBase /
    RewriteRule ^(media/.*)$ - [L]
    RewriteRule ^(static/.*)$ - [L]
    RewriteCond %{REQUEST_URI} !(django.fcgi)
    RewriteRule ^(.*)$ django.fcgi/$1 [L]
</code></pre>

<p><strong>django.fcgi</strong></p>

<pre><code>    #!/home/&lt;username&gt;/installed/python2.7/bin/python
    import sys, os

    # Add a custom Python path.
    sys.path.insert(0, "/home/&lt;username&gt;/&lt;website-location&gt;")

    # Switch to the directory of your project. (Optional.)
    #os.chdir("/home/&lt;username&gt;/&lt;website-location&gt;")

    # Set the DJANGO_SETTINGS_MODULE environment variable.
    os.environ['DJANGO_SETTINGS_MODULE'] = "&lt;projectname&gt;.settings"

    from django.core.servers.fastcgi import runfastcgi
    runfastcgi(method="threaded", daemonize="false")
</code></pre>

<h2>Conclusion</h2>

<p>So hopefully after following this little tutorial, you too can get the newest version
of django up and running on a hosted machine with no root access.</p>
]]></content>
  </entry>
  
</feed>
